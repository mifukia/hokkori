<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>テストページ003</title>
    <script src="https://aframe.io/releases/0.8.0/aframe.min.js"></script>
    <script src="https://rawgit.com/mayognaise/aframe-gif-shader/master/dist/aframe-gif-shader.min.js"></script>
    <script type="text/javascript" src="/socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-2.2.4.min.js" integrity="sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44=" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>
    <link rel='stylesheet' href='https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css' />
    <link rel='stylesheet' href='/stylesheets/style.css' />
</head>

<body>
    <div id="app">
        <a-scene>
            <a-assets>
                <img id="last" crossorigin="anonymous" src="hdri_image/Chelsea_Stairs_8k_3.jpg">
                <img id="hit" crossorigin="anonymous" src="img/hokkori.png">
                <img id="miss" crossorigin="anonymous" src="img/hikkori.png">
            </a-assets>

            <a-sky id="image-360" radius="10" src="#last"></a-sky>

            <a-plane id="box01" class="box" position="-9.234 -0.143 -1.620" rotation="0 90 0" scale="2 2 2" color="#FFFFFF"  material="opacity:0" ></a-plane><!--はずれ-->
            <a-plane id="box02" class="box" position="-7.36 -6.01 0.556" rotation="-39.175 92.424 -1.618" scale="1.5 1.5 1" color="#FFFFFF" material="opacity:0"></a-plane><!--はずれ-->
            <a-plane id="box03" class="box" position="-7.165 -5.330 3.447" rotation="-31.402 124.258 -3.405" scale="2 2 1"  color="#FFFFFF" material="opacity:0"></a-plane><!--あたり-->
            <a-plane id="box04" class="box" position="2.475 0.634 9.424" rotation="0 -176.659 0" scale="1.5 1.5 1" color="#FFFFFF" material="opacity:0"></a-plane><!--はずれ-->
            <a-plane id="box05" class="box" position="6.204 -1.471 -7.508" rotation="-11.646 -35.215 -0.926" scale="1.5 1.5 1"  color="#FFFFFF" material="opacity:0"></a-plane><!--あたり-->
            <a-plane id="box06" position="7.933 -2.735 4.964" rotation="-3.7236 -104.820 -0.420" color="#FFFFFF" material="opacity:0"></a-plane><!--あたり-->

            <a-camera>
                <a-entity cursor="fuse: true;" position="0 0 -9" scale="0.3 0.3 0.3" geometry="primitive: ring" material="color: black; shader: flat">
                  <a-animation begin="click" easing="ease-in" attribute="scale" dur="150" fill="forwards" from="0.1 0.1 0.1" to="0.3 0.3 0.3"></a-animation>
                  <a-animation begin="cursor-fusing" easing="ease-in" attribute="scale" dur="1500" fill="backwards" from="0.3 0.3 0.3" to="0.1 0.1 0.1"></a-animation>
              </a-entity>
            </a-camera>
        </a-scene>
        <div class="userData">
            <%= user %>
        </div>
        <div class="chatArea">
            <ul id="messages">
            </ul>
        </div>
        <div class="getArea">
            <p class="getArea__ttl">
                ほっこりカウント
            </p>
            <p class="getArea__count">
                <span>0</span>/3
            </p>
        </div>
        <p class="getArea__gif"><img src="" alt=""></p>
        <div class="getImg">
            <img src="/img/pengin_big.png" alt="つかまえた！！" class="animated">
        </div>
        <div class="gameset">
            <div class="gameset__link">
                <a href="/ending">次のゲームへ進む</a>
            </div>
        </div>
        <div class="wait">
                待機中…
            </div>
        <div class="overlay">
            <div class="count"></div>
        </div>
    </div>
    <script>

        const socket = io();
        let current = "page01"
        let getHit = 0
        let getMiss = 0

        //ログエリアの自動スクロール
        const chatScroll = () => {
            $('.chatArea').animate({
                scrollTop: $('.chatArea').get(0).scrollHeight
            }, '300');
        }

        //オブジェクトをクリックした時の処理
        $('.box').one('click', (e) => {
            const target = $(e.currentTarget).attr('id');
            const judge = () => target === 'box03' || target === 'box05' || target === 'box6'
            const action_hit = () => {
                $(e.currentTarget).attr({
                    'material': 'opacity:1',
                    'src': '#hit'
                })
                getHit++
                switch (getHit) {
                    case 1:
                        $('.getArea__gif img').attr('src', "/img/hokkorihan_1.gif");
                        setTimeout(() => {
                            $('.getArea__gif img').attr('src', "");
                        }, 3000)
                        break;
                    case 2:
                        $('.getArea__gif img').attr('src', "/img/hokkorihan_2.gif");
                        setTimeout(() => {
                            $('.getArea__gif img').attr('src', "");
                        }, 3000)
                        break;
                    case 3:
                        $('.getArea__gif img').attr('src', "/img/hokkorihan_3.gif");
                        setTimeout(() => {
                            $('.getArea__gif img').attr('src', "");
                        }, 3000)
                        break;
                }
                $('.getArea__count span').text(getHit);
                //sio.jsに通知する
                socket.emit('getMessageHit', {
                    name: '<%= user %>',
                    getnum: getHit,
                    page:'thirdhit',
                });
            }
            const action_miss = () => {
                $(e.currentTarget).attr({
                    'material': 'opacity:1',
                    'src': '#miss'
                })
                getMiss++
                //sio.jsに通知する
                socket.emit('getMessageMiss', {
                    name: '<%= user %>',
                    getnum: getMiss,
                    page:'thirdmiss',
                });
            }
            if (judge()) {
                action_hit();
            } else {
                action_miss();
            }
        });

        //login

        //sio.jsに通知
        // socket.on('connect', function() {
        //         socket.emit('login', {
        //             name: '<%= user %>',
        //         })
        //     })
            //sio.jsから受け取る
        // socket.on('login', (data) => {
        //     console.log(data.name)
        //     $('#messages').append(`
        //         <li class="login">
        //             <p class="msg">${data.username}がゲームを開始しました。</p>
        //         </li>
        //     `);
        //     chatScroll();
        // });

        //logout

        //sio.jsに通知
        $(window).on('beforeunload', function() {
            socket.emit('logout', {
                name: '<%= user %>',
            })
        });
        //sio.jsから受け取る
        socket.on('logout', (data) => {
            console.log(data.name)
            $('#messages').append(`
                <li class="logout">
                    <p class="msg">${data.username}が退室しました。</p>
                </li>
            `);
        });

        function func01(num) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    $('.count').text(num);
                    resolve(num-1);
                },1000)
            })
        }
        function func02(num) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    $('.count').text(num);
                    resolve(num-1);
                },500)
            })
        }
        function func03(num) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    $('.count').text(num);
                    resolve(num-1);
                },500)
            })
        }
        function func04(num) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    $('.count').css('color', 'red');
                    $('.count').text("GO!!");
                    resolve(num-1);
                },500)
            })
        }
        function func05(num) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    $('.count').css('visibility','hidden')
                    $('.overlay,.wait').hide();
                },500)
            })
        }

        function gameStart() {
            $('.count').css('visibility','visible')
            $('.count').css('animation-name','fadeIn')
            func01(3)
            .then(func02)
            .then(func03)
            .then(func04)
            .then(func05)
        }
        socket.on('gamestart', (data) => {
            gameStart();
        });

        //ログエリアへの出力
        socket.on('getMessageHit', (data) => {
            $('#messages').append(`
	                <li>
						<p>
							${data.username}が${data.getnum}匹目の細貝さんを見つけました！
						</p>
	                </li>
	            `);
            chatScroll();
        });

        //マスターからゲームセットを受けた時の処理
        socket.on('gameset', (data) => {
            $('.gameset,.overlay').show();
        });
    </script>
</body>

</html>
